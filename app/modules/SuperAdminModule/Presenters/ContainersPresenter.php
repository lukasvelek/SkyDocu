<?php

namespace App\Modules\SuperAdminModule;

use App\Constants\ContainerEnvironments;
use App\Constants\ContainerStatus;
use App\Core\DB\DatabaseRow;
use App\Core\Http\HttpRequest;
use App\Exceptions\AException;
use App\Exceptions\GeneralException;
use App\Helpers\GridHelper;
use App\UI\FormBuilder\FormResponse;
use App\UI\GridBuilder2\Cell;
use App\UI\GridBuilder2\Row;
use App\UI\HTML\HTML;
use App\UI\LinkBuilder;

class ContainersPresenter extends ASuperAdminPresenter {
    public function __construct() {
        parent::__construct('ContainersPresenter', 'Containers');
    }

    public function renderList() {
        $this->template->links = [
            LinkBuilder::createSimpleLink('New container', $this->createURL('newContainerForm'), 'link')
        ];
    }

    protected function createComponentContainersGrid(HttpRequest $request) {
        $grid = $this->componentFactory->getGridBuilder();

        $grid->createDataSourceFromQueryBuilder($this->app->containerRepository->composeQueryForContainers(), 'containerId');
        $grid->setGridName(GridHelper::GRID_CONTAINERS);

        $grid->addColumnText('title', 'Title');
        $col = $grid->addColumnConst('status', 'Status', ContainerStatus::class);
        $col->onRenderColumn[] = function(DatabaseRow $row, Row $_row, Cell $cell, HTML $html, mixed $value) {
            $el = HTML::el('span')
                ->text($value)
                ->style('color', ContainerStatus::getColor($row->status));

            return $el;
        };
        $grid->addColumnConst('environment', 'Environment', ContainerEnvironments::class);

        $settings = $grid->addAction('settings');
        $settings->setTitle('Settings');
        $settings->onCanRender[] = function() {
            return true;
        };
        $settings->onRender[] = function(mixed $primaryKey, DatabaseRow $row, Row $_row, HTML $html) {
            $el = HTML::el('a')
                ->class('grid-link')
                ->href($this->createFullURLString('SuperAdmin:ContainerSettings', 'home', ['containerId' => $primaryKey]))
                ->text('Settings');

            return $el;
        };
        
        return $grid;
    }

    public function handleNewContainerForm(?FormResponse $fr = null) {
        if($fr !== null) {
            try {
                if($this->app->containerManager->checkContainerTitleExists($fr->title)) {
                    throw new GeneralException('Container with this name already exists.');
                }

                $canShowReferent = false;
                if(isset($fr->canShowReferent) && $fr->canShowReferent == 'on') {
                    $canShowReferent = true;
                }
    
                $containerId = $this->app->containerManager->createNewContainer($fr->title, $fr->description, $this->getUserId(), (int)$fr->environment, $canShowReferent);
    
                $this->flashMessage('New container created. Container interface will be generated by background service.', 'success');
            } catch(AException $e) {
                $this->flashMessage('Could not create new container. Reason: ' . $e->getMessage(), 'error', 10);
            }
    
            $this->redirect($this->createURL('list'));
        }
    }

    public function renderNewContainerForm() {
        $this->template->links = [
            LinkBuilder::createSimpleLink('&larr; Back', $this->createURL('list'), 'link')
        ];
    }

    protected function createComponentForm(HttpRequest $request) {
        $environments = [];
        foreach(ContainerEnvironments::getAll() as $value => $text) {
            $environments[] = [
                'value' => $value,
                'text' => $text
            ];
        }

        $form = $this->componentFactory->getFormBuilder();

        $form->setAction($this->createURL('newContainerForm'));

        $form->addLabel('basicInformation', 'Basic information')
            ->setTitle();

        $form->addTextInput('title', 'Title:')
            ->setRequired()
            ->setPlaceholder('Container title');

        $form->addTextArea('description', 'Description:')
            ->setPlaceHolder('Description')
            ->setRequired();

        $form->addSelect('environment', 'Environment:')
            ->addRawOptions($environments)
            ->setRequired();

        $form->addCheckboxInput('canShowReferent', 'Is referent visible?')
            ->setChecked();

        $form->addSubmit('Submit');

        return $form;
    }
}

?>