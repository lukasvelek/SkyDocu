<?php

namespace App\Modules\SuperAdminModule;

use App\Constants\ContainerStatus;
use App\Core\Http\HttpRequest;
use App\Exceptions\AException;
use App\Exceptions\GeneralException;
use App\Helpers\GridHelper;
use App\UI\FormBuilder\FormBuilder;
use App\UI\FormBuilder\FormResponse;
use App\UI\LinkBuilder;

class ContainersPresenter extends ASuperAdminPresenter {
    public function __construct() {
        parent::__construct('ContainersPresenter', 'Containers');
    }

    public function renderList() {
        $this->template->links = [
            LinkBuilder::createSimpleLink('New container', $this->createURL('newContainerForm'), 'link')
        ];
    }

    protected function createComponentContainersGrid(HttpRequest $request) {
        $grid = $this->getGridBuilder();

        $grid->createDataSourceFromQueryBuilder($this->app->containerRepository->composeQueryForContainers(), 'containerId');
        $grid->setGridName(GridHelper::GRID_CONTAINERS);

        $grid->addColumnText('title', 'Title');
        $grid->addColumnConst('status', 'Status', ContainerStatus::class);
        
        return $grid;
    }

    public function handleNewContainerForm(?FormResponse $fr = null) {
        if($fr !== null) {
                try {
                    if($this->app->containerManager->checkContainerTitleExists($fr->title)) {
                        throw new GeneralException('Container with this name already exists.');
                    }

                    $containerId = $this->app->containerManager->createNewContainer($fr->title, $fr->description, $this->getUserId());

                    $this->flashMessage('New container created. Container interface will be generated by background service.', 'success');
                } catch(AException $e) {
                    $this->flashMessage('Could not create new container. Reason: ' . $e->getMessage(), 'error', 10);
                }

                $this->redirect($this->createURL('list'));
        } else {
            $form = new FormBuilder();

            $form->setAction($this->createURL('newContainerForm'))
                ->setMethod()
                ->addTextInput('title', 'Title:', null, true)
                ->addTextArea('description', 'Description:', null, true)
                ->addSubmit('Create')
            ;

            $this->saveToPresenterCache('form', $form);
        }
    }

    public function renderNewContainerForm() {
        $this->template->form = $this->loadFromPresenterCache('form');

        $this->template->links = [
            LinkBuilder::createSimpleLink('&larr; Back', $this->createURL('list'), 'link')
        ];
    }
}

?>